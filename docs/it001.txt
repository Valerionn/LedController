Iteration 1:

Festlegung: 1 SP = 5 min.
30 min reine Programmierzeit => 6 SP pro Team

Sprintplanung:
- Epic 1:
    Story 1.1 - Einzel-Status-Abfrage: 4
        - ApiService erweitern um getLight(id) -Methode, die den
          Status einer spezischen LED abruft.
        - ApiServiceImpl dabei refactoren, sodass gemeinsamer Code in
          eine Methode ausgelagert wird
        - Keine Code-Duplication zwischen getLights() und
          getLight(id)
          Erledigt.
    Story 1.2 - Gruppen-Status-Abfrage  3
        - LedController erweitern um getGroupLeds() -Methode, die ein
          Array aus allen LED-Status der Gruppen-LEDs zurückgibt
        - Test hinzufügen, der den ApiService mocked und prüft, dass
          getGroupLeds() die korrekten Methoden aufruft
        - In den Tests sollen keine API-Calls zum tatsächlichen Server gesendet
          werden!
    Story 1.3 - Status-Abfrage 4
        - Main erweitern, sodass groupstatus eingegeben werden kann,
          um den Status aller Gruppen-LEDs anzuzeigen
        - Main erweitern, sodass status eingegeben werden kann, um den
          Status einer LED abzufragen. Dabei wird die ID abgefragt:

          ` `
Aufgrund von krankheitsbedingter Teamgröße (2 Personen) nur 6 SP pro Sprint => 1.1
nd so viel von 1.2 wie möglich als Sprintziel.

Daily 1: Technische Schwierigkeiten bei Jeffrey (Projekt lässt sich nicht öffnen),
Matthias versucht ihm zu helfen (Koffein wurde bereitgestellt).
Da technische Schwierigkeiten fast behoben jetzt möglichst schnelles Coden.

Daily 2: Technische Schwierigkeiten behoben.
Matthias erstellt Issues (beim letzten mal im flaschen Repo)
Jeffrey macht derweil implementation.

Retro:
Gute Schätzung:
    1.1 Abgeschlossen
    1.2 Implementiert, kämpft aber noch mit Bugs.
Ausblick:
    - Krankenstand wird besser (+1 MA)
    - Ziel: Epic 1 abschließen
Verbesserungen:
    - Issues sauberer tracken


